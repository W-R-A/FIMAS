#include "routineRun.hpp"

//Routine Thread
Thread routineThread(osPriorityRealtime);

//Create eventqueues
EventQueue routineQueue;

//startRoutine - Responsible for running the routine EventQueue
void startRoutine(void) {
    //Start event queue on thread
    routineQueue.dispatch();
}

//Seconds since starting routine
uint16_t routineElapsed = 0;

//Get routine duration in seconds
uint16_t routineDuration = getRoutineDuration();

//ID of the EventQueue task generated by calling runRoutine every second
int routineEventQueueID = 0;

void runRoutine(void) {

    //If the routine has not finished
    if (routineElapsed < routineDuration) {
        //Loop through routine and change state if required
        for (deviceTimes n : routine) {
            //If a device needs to change state
            if (routineElapsed == n.startTime) {
                //Loop through the devices array
                for (int i = 0; i < devices.size(); i++) {
                    //If the device ID matches the specified ID
                    if (n.devID == devices[i]->getID()) {
                        //Change the state of the device
                        devices[i]->changeState(n.devState);
                    }
                }
            }
        }

        //Increment elapsed time
        routineElapsed++;

    }
    else {
        //Stop the function from being called again as the routine has finished
        routineQueue.cancel(routineEventQueueID);

        //Reset devies to default state
        resetRoutineDevices();
    }
}